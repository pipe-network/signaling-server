// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package signaling_server

import (
	"github.com/google/wire"
	"github.com/pipe-network/signaling-server/application"
	"github.com/pipe-network/signaling-server/application/services"
	"github.com/pipe-network/signaling-server/infrastructure/providers"
	"github.com/pipe-network/signaling-server/infrastructure/storages"
	"github.com/pipe-network/signaling-server/interface/controllers"
)

// Injectors from wire.go:

func InitializeMainApplication() (application.MainApplication, error) {
	upgrader := providers.ProvideUpgrader()
	publicKeyPath := providers.ProvidePublicKeyPath()
	privateKeyPath := providers.ProvidePrivateKeyPath()
	keyPairLocalStorageAdapter, err := storages.NewKeyPairLocalStorageAdapter(publicKeyPath, privateKeyPath)
	if err != nil {
		return application.MainApplication{}, err
	}
	saltyRTCService := services.NewSaltyRTCService(keyPairLocalStorageAdapter)
	signalingController := controllers.NewSignalingController(upgrader, saltyRTCService)
	serverAddress := providers.ProvideServerAddress()
	tlsCertFilePath := providers.ProvideTLSCertFilePath()
	tlsKeyFilePath := providers.ProvideTLSKeyFilePath()
	mainApplication := application.NewMainApplication(signalingController, serverAddress, tlsCertFilePath, tlsKeyFilePath)
	return mainApplication, nil
}

// wire.go:

var Providers = wire.NewSet(providers.ProvideUpgrader)

var FlagProviders = wire.NewSet(providers.ProvideServerAddress, providers.ProvidePublicKeyPath, providers.ProvidePrivateKeyPath, providers.ProvideTLSCertFilePath, providers.ProvideTLSKeyFilePath)
